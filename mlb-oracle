#!/bin/env python3
""" Predict the MLB scores of the day """

"""Towards 1.0

* Time of game

* Highlight the favored team

* Include real scores if game is final

* Implement mode that also tells you the lineups

* Finalize error reporting strategy

"""

# TODO CRTL-C behavior

import argparse
import datetime
import logging
import subprocess
import sys
import tempfile
import traceback

import statsapi

import ballgame


TTYColor = {
    'red': 31,
    'green': 32,
    'yellow': 33,
    'blue': 34,
    'cyan': 36,
    'white': 37,
}

def set_stderr_color(code):
    sys.stderr.write("\033[%dm" % code)
    sys.stderr.flush()

def clear_stderr_color():
    sys.stderr.write("\033[0m")
    sys.stderr.flush()

def colored_msg(code, msg):
    return "\033[{}m{}\033[0m".format(code, msg) if code else msg


def bold(msg):
    return "\033[1m{}\033[0m".format(msg)


def colormap(winprob):
    """ Mapping fron win probability to tty color code """
    if winprob < 0.25:
        return TTYColor['white']
    if 0.25 <= winprob < 0.45:
        return TTYColor['red']
    if 0.45 <= winprob < 0.55:
        return TTYColor['yellow']
    if 0.55 <= winprob < 0.75:
        return TTYColor['green']
    if 0.75 <= winprob:  # pylint: disable=misplaced-comparison-constant
        return TTYColor['cyan']
    return None


class GameLine(object):
    def __init__(self, game):
        self.game = game
        self.status = ""
        pass

    def postponed(self):
        self.status = 'POSTPONED'
        self.color = TTYColor['blue']

    def fetching(self):
        self.status = 'FETCHING DATA...'
        self.color = TTYColor['white']

    def predicting(self):
        self.status = 'PREDICTING...'
        self.color = TTYColor['white']

    def prediction(self, home_win_probability):
        if home_win_probability is None:
            self.status = 'NO PREDICTION'
            self.color = TTYColor['red']

        else:
            nboxes_per_team = 10
            awp = 1 - home_win_probability
            nfull_h = round(home_win_probability * nboxes_per_team)
            nfull_a = round(awp * nboxes_per_team)

            # Away
            line = ''
            for _ in range(nboxes_per_team - nfull_a):
                line += '□'
            subline = ''
            for _ in range(nfull_a):
                subline += '■'
            line += colored_msg(colormap(awp), subline)

            # Separator
            line += ' '

            # Home
            subline = ''
            for _ in range(nfull_h):
                subline += '■'
            line += colored_msg(colormap(home_win_probability), subline)
            for _ in range(nboxes_per_team - nfull_h):
                line += '□'

            self.color = None
            self.status = line

    def frontend_error(self):
        self.status = 'FRONTEND ERROR'
        self.color = TTYColor['red']

    def backend_error(self):
        self.status = 'BACKEND ERROR'
        self.color = TTYColor['red']

    def missing_lineups(self):
        self.status = 'MISSING LINEUPS'
        self.color = TTYColor['yellow']

    def missing_lineup_away(self):
        self.status = 'MISSING LINEUP A'
        self.color = TTYColor['yellow']

    def missing_lineup_home(self):
        self.status = 'MISSING LINEUP H'
        self.color = TTYColor['yellow']

    def final(self):
        self.update()
        print('')


    def update(self):
        # Clears tty line and puts cursor at beginning
        print("\033[2K\r", end='')

        if self.color is None:
            status = self.status
        else:
            status = colored_msg(self.color, bold('{:^21}'.format(self.status)))

        line = '{:>25} {} {}'.format(
            self.game['away_name'],
            status,
            self.game['home_name']
        )

        print(line, end='')

        sys.stdout.flush()


# TODO move to ballgame.py
def dump_lineup(team, path):
    """ Save lineup of `team' to `path' in format understood by ballgame.cxx """
    with open(path, 'w') as outf:
        outf.write('{} {} {} {}\n'.format(
            team.pitcher['H'],
            team.pitcher['BB'],
            team.pitcher['SO'],
            team.pitcher['BF']
        ))
        for btr in team.batters:
            outf.write('{} {} {} {} {} {} {}\n'.format(
                btr['AB'],
                btr['H'],
                btr['2B'],
                btr['3B'],
                btr['HR'],
                btr['SO'],
                btr['BA'],
            ))


def predict(away, home):
    """ Run the ballgame.cxx prediction code """
    tmp_away = tempfile.NamedTemporaryFile()
    tmp_home = tempfile.NamedTemporaryFile()

    if not (away and home):
        # TODO gather info to debug
        logging.debug('Technical problem!')
        return None

    dump_lineup(away, tmp_away.name)
    dump_lineup(home, tmp_home.name)

    try:
        hwp = ballgame.run_simulations(tmp_away.name, tmp_home.name)
    finally:
        tmp_away.close()
        tmp_home.close()

    return hwp


def lineup(game_data, key):
    """ return None if lineup unavailable, otherwise return Team object """

    if len(game_data[key + 'Pitchers']) == 1:
        return None

    startp = game_data[key + 'Pitchers'][1]
    startpd = statsapi.player_stat_data(
        startp['personId'],
        group='pitching',
        type='career'
    )
    stats = startpd['stats'][0]['stats']

    pitcher = ballgame.pitcher(
        startp['namefield'],
        stats['hits'],
        stats['baseOnBalls'],
        stats['strikeOuts'],
        stats['battersFaced']
    )

    batters = []

    btrs = game_data[key + 'Batters'][1:]
    if not btrs:
        return None

    for batter in game_data[key + 'Batters'][1:]:
        if batter['namefield'][0].isdigit():
            try:
                btrd = statsapi.player_stat_data(
                    batter['personId'],
                    group='hitting',
                    type='career'
                )
            except KeyError:
                return None
            stats = btrd['stats'][0]['stats']
            batters.append(ballgame.batter(
                batter['namefield'],
                stats['atBats'],
                stats['hits'],
                stats['doubles'],
                stats['triples'],
                stats['homeRuns'],
                stats['strikeOuts'],
                float('0' + stats['avg']),
            ))
    return ballgame.Team(pitcher, batters)


def oracle(game):
    """ Predict outcome of `game' """

    gline = GameLine(game)

    if game['status'] == 'Postponed':
        gline.postponed()
        gline.final()
        return 0

    gline.fetching()
    gline.update()

    game_data = statsapi.boxscore_data(game['game_id'])
    team_away = team_home = None
    try:
        team_away = lineup(game_data, 'away')
        team_home = lineup(game_data, 'home')
    except:
        gline.frontend_error()
        gline.final()
        set_stderr_color(TTYColor['red'])
        traceback.print_exc()
        clear_stderr_color()
        return 1

    if (not team_away) and (not team_home):
        gline.missing_lineups()
        gline.final()
        return 0

    if not team_away:
        gline.missing_lineup_away()
        gline.final()
        return 0

    if not team_home:
        gline.missing_lineup_home()
        gline.final()
        return 0

    gline.predicting()
    gline.update()
    try:
        home_win_probability = predict(team_away, team_home)
    except:
        gline.backend_error()
        gline.final()
        set_stderr_color(TTYColor['red'])
        traceback.print_exc()
        clear_stderr_color()
        return 1

    gline.prediction(home_win_probability)
    gline.final()


    return 0


def _configure_logging():
    # TODO: change basic level to WARNING
    # TODO: use INFO and/or DEBUG levels
    logging.basicConfig(
        format='[%(asctime)s %(levelname)s %(process)d/%(module)s.%(funcName)s] %(message)s',
        level=logging.ERROR
    )


def _get_args():
    args = argparse.ArgumentParser()
    args.add_argument('date', nargs='?', default=datetime.date.today().isoformat())
    return args.parse_args()


def _main():
    args = _get_args()
    _configure_logging()
    logging.info('mlb-oracle version alpha.1')
    date = datetime.date.fromisoformat(args.date)
    logging.info('Predictions for %s', date.isoformat())

    logging.debug('Fetching schedule')
    sched = statsapi.schedule(start_date=date.strftime('%m/%d/%Y'))
    logging.debug('Result: %s', sched is not None)

    rc = 0
    for game in sched:
        ret = oracle(game)
        if ret != 0:
            rc = ret

    return rc

if __name__ == '__main__':
    exit(_main())
